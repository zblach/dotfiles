" .vimrc - zblach 2014
" vim: fmr={+,}- fdm=marker ts=4 nospell tw=0 sbr=\\ noet nosta
set nocompatible
filetype off

" core vim settings {+
	let g:colorscheme = 'hybrid'

	set laststatus=2
	set cursorline
	set shiftround

	set colorcolumn=80,+1

	" search and navigation
	set incsearch ignorecase smartcase hlsearch

	" terminal settings
	set hidden lazyredraw
	set encoding=utf-8 shell=/bin/zsh title hidden ttyfast visualbell
	set t_ut= " disable BCE
	
	" fill chars
	set listchars=tab:>-,eol:$,precedes:<,extends:>,trail:~,conceal:#,nbsp:_
	set fillchars=vert:\â”‚,fold:-
	set diffopt+=iwhite

	" misc
	set backspace=indent,eol,start
	set scrolloff=7 scrolljump=4
	set virtualedit="all,onemore"
	set display+=lastline

	" tab-expansion configuration
	set wildmenu wildmode=list:longest,list:full wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store

	set autoindent
	set expandtab smarttab tabstop=4 softtabstop=4 shiftwidth=4 nowrap
	set wrapmargin=0

	" modeline overrides default options
	set modeline modelines=10 noshowmode

	" undo, history, and persistent views
	sil !mkdir -p ~/.vim_temp/{backup,cache,undo,views}

	set noswapfile
	set backup backupdir=~/.vim_temp/backup//
	set undofile undolevels=10000 undodir=~/.vim_temp/undo//
	set viewdir=~/.vim_temp/views//

" }-
" bundles {+
	" neobundle configuration {+
		"let expand('/.vim/bundle/')=expand('~/.vim/bundle/')
		" bootstrapping {+
			if empty(glob(expand('~/.vim/bundle/')."neobundle.vim"))
				echom "NeoBundle not found, bootstrapping."
				exe "!git clone https://github.com/Shougo/neobundle.vim ".expand('~/.vim/bundle').'neobundle.vim'
			endif
		" }-
		set runtimepath+=~/.vim/bundle/neobundle.vim
		call neobundle#begin(expand('~/.vim/bundle/'))

		NeoBundleFetch 'Shougo/neobundle.vim'
	" }-
	" core bundles {+
		" tommcdo plugins {+
			NeoBundle 'tommcdo/vim-lion'
			NeoBundle 'tommcdo/vim-ninja-feet'
			NeoBundle 'tommcdo/vim-text-objects'
		" }-
		" tpope plugins {+
			NeoBundleLazy 'tpope/vim-dispatch'
			NeoBundle 'tpope/vim-obsession'
			NeoBundle 'tpope/vim-repeat'
			NeoBundle 'tpope/vim-speeddating'
			NeoBundle 'tpope/vim-surround'
			NeoBundle 'tpope/vim-unimpaired'
		" }-
		" shougo plugins {+
			NeoBundle 'Shougo/vimproc.vim', {'build': {'mac' : 'make -f make_mac.mak', 'linux' : 'make'}}
			NeoBundle 'Shougo/neocomplete' " depends on lua, which isn't always available
			NeoBundle 'Shougo/neosnippet', {'depends':['honza/vim-snippets', 'Shougo/neosnippet-snippets']} " snippets {{{
			NeoBundle 'Shougo/neosnippet-snippets'
			NeoBundle 'Shougo/unite.vim',  {'depends':['Shougo/vimproc.vim']}
			NeoBundle 'Shougo/vimshell.vim'
			" unite plugins {+
				NeoBundleLazy 'osyo-manga/unite-filetype', {'autoload': {'unite_sources': 'filetype'}}
				NeoBundleLazy 'osyo-manga/unite-fold',     {'autoload': {'unite_sources': 'fold'}}
				NeoBundleLazy 'osyo-manga/unite-quickfix', {'autoload': {'unite_sources': ['quickfix', 'location_list']}}
				NeoBundleLazy 'osyo-manga/vim-snowdrop',   {'autoload': {'unite_sources': 'snowdrop'}}
				NeoBundleLazy 'tacroe/unite-mark',         {'autoload': {'unite_sources': 'mark'}}
				NeoBundleLazy 'thinca/vim-unite-history',  {'autoload': {'unite_sources': ['history/command', 'history/search']}}
				NeoBundleLazy 'tsukkee/unite-help',        {'autoload': {'unite_sources': 'help'}}
				NeoBundleLazy 'ujihisa/unite-colorscheme', {'autoload': {'unite_sources': 'colorscheme'}}
				NeoBundleLazy 'ujihisa/unite-locate',      {'autoload': {'unite_sources': 'locate'}}
				NeoBundleLazy 'Shougo/neomru.vim',         {'autoload': {'unite_sources': ['file_mru', 'directory_mru']}}
				NeoBundleLazy 'Shougo/unite-outline',      {'autoload': {'unite_sources': 'outline'}}
			" }-
		" }-
		" alternatives {+
			" NeoComplete requires if_lua
			" TBD: find alternative
			"if has('lua')
			"	NeoBundleSource neocomplete
			"end
		" }-
		" productivity tools {+
			NeoBundle 'dbakker/vim-projectroot'
			"NeoBundle 'dhruvasagar/vim-dotoo'
			"NeoBundle 'jceb/vim-orgmode'
			NeoBundleLazy 'sjl/gundo.vim',              {'autoload':{'commands':'GundoToggle'}}
			"NeoBundleLazy 'szw/vim-ctrlspace',          {'autoload':{'commands':'CtrlSpace'}}
			NeoBundleLazy 'majutsushi/tagbar',          {'autoload':{'commands':'TagbarToggle'}}
		" }-
		" version control plugins {+
			NeoBundle 'tpope/vim-fugitive'
			NeoBundle 'tommcdo/vim-fugitive-blame-ext', {'depends' : 'tpope/vim-fugitive'}
			NeoBundle 'gregsexton/gitv'
		" }-
		" code and tab completion {+
			NeoBundle 'tomtom/tlib_vim'
			NeoBundle 'MarcWeber/vim-addon-mw-utils'
			NeoBundle 'honza/vim-snippets'
			NeoBundle 'garbas/vim-snipmate'
			NeoBundle 'scrooloose/syntastic'
			NeoBundle 'honza/vim-snippets'
		" }-
		" text navigation and alignment {+
			NeoBundle 'Lokaltog/vim-easymotion'
			NeoBundle 'bkad/CamelCaseMotion'
			NeoBundle 'guns/vim-sexp'
			"NeoBundleLazy 'felixr/vim-multiedit'
			"NeoBundle 'terryma/vim-multiple-cursors'
			NeoBundle 'ciaranm/detectindent'
		" }-
		" keys and external bindings {+
			"NeoBundle 'kana/vim-arpeggio'
			NeoBundle 'takac/vim-hardtime'
			NeoBundle 'benmills/vimux' " unused?
			NeoBundle 'mhinz/vim-tmuxify' " unused?
		" }-
		NeoBundle 'chrisbra/NrrwRgn'
	" }-
	" color and visual bundles {+
		" color schemes {+
			NeoBundle 'altercation/vim-colors-solarized'
			NeoBundle 'baeuml/summerfruit256.vim'
			NeoBundle 'jonstoler/werewolf.vim'
			NeoBundle 'junegunn/seoul256.vim'
			NeoBundle 'sjl/badwolf'
			NeoBundle 'trapd00r/neverland-vim-theme'
			NeoBundle 'w0ng/vim-hybrid'
		" }-
		" gui-only colorschemes {+
			NeoBundleLazy 'chriskempson/base16-vim' "not compatible with CSApprox

			if has('gui_running')
				NeoBundleSource 'base16-vim'
			endif
		" }-
		" visual indicators {+
			NeoBundle 'bling/vim-airline'
			NeoBundle 'idbrii/vim-mark'
			NeoBundle 'nathanaelkane/vim-indent-guides'
			NeoBundle 'mhinz/vim-signify'
			NeoBundleLazy 'junegunn/goyo.vim',             {'autoload':{'commands':'Goyo'}}
			NeoBundleLazy 'ryanoasis/vim-webdevicons'
			NeoBundleLazy 'scrooloose/nerdtree',           {'autoload':{'commands':'NERDTreeToggle'}}
		" }-
		" additional syntax highlighting and matching {+
			NeoBundle 'luochen1990/rainbow'
			NeoBundleLazy 'chrisbra/Colorizer',            {'autoload':{'commands':'ColorToggle'}}
			NeoBundleLazy 'junegunn/limelight.vim',        {'autoload':{'commands':'Limelight'}}
			NeoBundleLazy 'jaxbot/semantic-highlight.vim', {'autoload':{'commands':'SemanticHighlightToggle'}}
		" }-
		" experimental {+
			NeoBundle 'Shougo/vimfiler'
		" }-
	" }-
	" language-specific bundles {+
		" csv
		NeoBundleLazy 'chrisbra/csv.vim',              {'autoload':{'filetypes':['csv']}}

		" haskell
		NeoBundleLazy 'ujihisa/neco-ghc',              {'autoload':{'filetypes':['h']}}

		" hex
		NeoBundleLazy 'Shougo/vinarise.vim',           {'autoload':{'filetypes':['bin', 'xxd', 'hex']}}

		" html
		NeoBundleLazy 'rstacruz/sparkup',              {'autoload':{'filetypes':['html','xml']}}

		" json
		NeoBundleLazy 'elzr/vim-json',                 {'autoload':{'filetypes':['json']}}

		" markdown
		NeoBundleLazy 'nelstrom/vim-markdown-folding', {'autoload':{'filetypes':['markdown','md']}}
		NeoBundleLazy 'suan/vim-instant-markdown',     {'autoload':{'filetypes':['markdown','md']}}

		" mediawiki
		NeoBundleLazy 'chikamichi/mediawiki.vim',      {'autoload':{'filetypes':['wiki','mediawiki']}}

		" python
		NeoBundleLazy 'ivanov/vim-ipython',            {'autoload':{'filetypes':['python']}}
		NeoBundleLazy 'nvie/vim-flake8',               {'autoload':{'filetypes':['python']}}
		NeoBundleLazy 'klen/python-mode',              {'autoload':{'filetypes':['python']}}

		" rust
		NeoBundleLazy 'wting/rust.vim',                {'autoload':{'filetypes':['rust', 'rs']}}

		" scala
		NeoBundleLazy 'derekwyatt/vim-scala',          {'autoload':{'filetypes':['scala']}}
		NeoBundleLazy 'megaannum/vimside',             {'autoload':{'filetypes':['scala']}, 'depends': ['Shougo/vimshell.vim', 'Shougo/vimproc']}

		" swift
		NeoBundleLazy 'toyamarinyon/vim-swift',        {'autoload':{'filetypes':['swift','playground']}}

		" sql
		NeoBundleLazy 'vim-scripts/dbext.vim',         {'autoload':{'filetypes':['sql']}}

		" vim
		NeoBundleLazy 'dbakker/vim-lint',              {'autoload':{'filetypes':['vim']}}
	" }-
	" disabled bundles {+
		NeoBundleDisable vim-multiedit
	" }-
	call neobundle#end()
	NeoBundleCheck
" }-
" bundle settings {+
	" airline {+
		let g:airline_powerline_fonts=1
		
		let g:airline#extensions#whitespace#enabled=0

		let g:airline#extensions#tabline#enabled=1
		let g:airline#extensions#tabline#formatter='unique_tail_improved'

		let g:airline_mode_map={
			\ '__' : '---',
			\ 'n'  : 'NOR',
			\ 'i'  : 'INS',
			\ 'R'  : 'REP',
			\ 'c'  : 'CMD',
			\ 'v'  : 'VIS',
			\ 'V'  : 'VSL',
			\ '' : 'VBK',
			\ 's'  : 'SCH',
			\ 'S'  : 'SLN',
			\ '' : 'SBK',
		\ }
	" }-
	" rainbow brackets {+
		let g:rainbow_active=1
		let g:rainbow_conf={
		\	'guifgs'      : ['RoyalBlue', 'DarkOrange', 'DarkOrchid', 'FireBrick', 'magenta'],
		\	'ctermfgs'    : ['lightblue', 'lightgreen', 'yellow'    , 'red'      , 'magenta'],
		\	'parentheses' : [['(',')']  , ['\[','\]'] , ['{','}']   , ['<','>'] ],
		\	'operators'   : '_,_',
		\	'separately'  : {
		\		'*'      : {},
		\		'python' : {
		\		   'parentheses' : [['(',')'], ['\[','\]'], ['{','}']]
		\		},
		\		'vim'    : {
		\			'parentheses' : [['{+','}-']]
		\		},
		\		'cpp'    : {
		\			'operators' : '_<<,>>_'
		\		},
		\	},
		\}
	" }-
	" syntastic {+
		" symbols
		let g:syntastic_check_on_open=1
		let g:syntastic_warning_symbol='>'
		let g:syntastic_error_symbol='x'
		let g:syntastic_style_error_symbol='*'
		let g:syntastic_style_warning_symbol='+'
		
		let g:syntastic_enable_highlighting=1
		let g:syntastic_stl_format='[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

		let g:syntastic_mode_map = {"mode" : "active", "passive_filetypes" : []}

		" language-specific settings {+
			" c++ {+
				if executable('clang++')
					let g:syntastic_cpp_checkers=['gcc', 'clang_check']
					let g:syntastic_cpp_compiler='clang++'
					let g:syntastic_cpp_compiler_options=' -Wall -std=c++11-extensions -stdlib=libc++'
					let g:syntastic_clang_check_options = g:syntastic_cpp_compiler_options
					let g:syntastic_cpp_include_dirs=['/usr/local/include']
				endif
			" }-
			" javascript {+
				let g:syntastic_javascript_checkers=['jsl']
			" }-
			" python {+
				let g:syntastic_mode_map.passive_filetypes=['python']
				"let g:pymode_lint_write = 0
				let g:pymode_virtualenv_enabled = 1
			" }-
		" }-
	" }-
	" hardtime {+
		let g:hardtime_showmsg=1
		let g:hardtime_default_on=1
		let g:hardtime_ignore_quickfix=1
		let g:hardtime_ignore_buffer_patterns=["Unite","Gundo","Help"]
	" }-
	" unite {+
		let g:unite_source_history_yank_enable=2
		let g:unite_enable_start_insert=1
		let g:unite_winwidth=10
		let g:unite_split_rule='botright'

		call unite#filters#matcher_default#use(['matcher_fuzzy'])
		call unite#filters#sorter_default#use(['sorter_rank'])

		call unite#custom#profile('default', 'context', {
		\              'log' : 1,
		\ })
		call unite#custom#profile('source/colorscheme', 'context', {
		\     'auto_preview' : 1,
		\              'log' : 0,
		\     'start-insert' : 0,
		\   'prompt-visible' : 0,
		\ })
		call unite#custom#profile('source/line', 'context', {
		\      'buffer_name' : 'filter',
		\ 'prompt_direction' : 'below',
		\            'split' : 1,
		\              'tab' : 0,
		\           'prompt' : '&/',
		\           'toggle' : 1,
		\ })
		call unite#custom#source('source/line', 'matchers', 'matcher_regexp')

		" set fuzzy finder
		if !exists('g:finders') | let g:finders = ['ag', 'fzf', 'find'] | endif

		for finder in g:finders
			if !executable(finder) 
				continue
			endif
			if finder == 'ag'
				set grepprg=ag
				let g:unite_source_grep_command='ag'
				let g:unite_source_grep_default_opts='-i --line-numbers --nocolor --nogroup --hidden --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr"'
				let g:unite_source_grep_recursive_opt=''
				let g:unite_source_grep_encoding='utf-8'

				let g:unite_source_rec_async_command='ag --follow --nocolor --group --hidden -g ""'

				break	
			elseif finder == 'fzf'
				" TBD
				break
			elseif finder == 'find'
				" TBD
				break
			else
				echom "Unhandled finder ".finder." used. You\'re on your own."
				break
			endif
		endfor
	" }-
" }-
" keymapping {+
	" Rebind leader key
	let mapleader=' '

	" common bindings
	map Y y$

	" toggles
	nnor [toggle] <nop>
	nmap <leader>o [toggle]

	nnor [toggle]i :set list! list?<cr>
	nnor [toggle]n :set number! number?<cr>
	nnor [toggle]N :set relativenumber! relativenumber?<cr>
	nnor [toggle]v :set paste! paste?<cr>
	nnor [toggle]w :set wrap! wrap?<cr>

	" search and visual navigation
	nnor j gj
	nnor k gk
	vnor j gj
	vnor j gk

	nnor n nzzzv
	nnor N Nzzzv
	nnor g; g;zz
	nnor g, g,zz

	" visual block reselect
	xnor < <gv
	xnor > >gv

	" let ; function as :
	nnor ; :

	" nuke 'ex' mode
	nnor Q <nop>

	" super sudo write
	command! SudoWrite exec 'w !sudo tee % > /dev/null' | :e!
	cno w!! SudoWrite

	" CamelCaseMotion {+
		map <silent> w <Plug>CamelCaseMotion_w
		map <silent> b <Plug>CamelCaseMotion_b
		map <silent> e <Plug>CamelCaseMotion_e
		sunmap w
		sunmap b
		sunmap e

		" overwrite behaviour for text objects
		omap <silent> iw <Plug>CamelCaseMotion_iw
		xmap <silent> iw <Plug>CamelCaseMotion_iw
		omap <silent> ib <Plug>CamelCaseMotion_ib
		xmap <silent> ib <Plug>CamelCaseMotion_ib
		omap <silent> ie <Plug>CamelCaseMotion_ie
		xmap <silent> ie <Plug>CamelCaseMotion_ie
	" }-
	" NeoComplete {+
		" Use neocomplete.
		let g:acp_enableAtStartup=0
		let g:neocomplete#enable_at_startup=1
		let g:neocomplete#data_directory='~/.vim/cache/neocomplete'
		" Use smartcase.
		let g:neocomplete#enable_smart_case=1
		let g:neocomplete#enable_fuzzy_completion=1

		" additional C++ sources
		if (!exists('g:neocomplete#sources#include#paths'))
			let g:neocomplete#sources#include#paths={}
			let g:neocomplete#sources#include#paths.cpp=""
		endif

		let g:neocomplete#sources#include#paths.cpp .= ".,/usr/local/include/"

		let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets'
		let g:neosnippet#enable_snipmate_compatibility=1

		imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ? "\<C-n>" : "\<TAB>")
		smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
		imap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
		smap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
	" }-
	" Unite {+
		" Unite leader key
		nnor [unite] <nop>
		nmap <leader>. [unite]

		" grep
		nnor <silent> [unite]/ :<C-u>Unite -buffer-name=results grep:.<cr>
		nnor <silent> [unite]w/ :<C-u>UniteWithCursorWord -buffer-name=results grep:.<cr>

		" Misc	
		nnor <silent> [unite]? :<C-u>Unite -buffer-name=keymap mapping<cr>
		nnor <silent> [unite]b :<C-u>Unite -buffer-name=buffers buffer<cr>
		nnor <silent> [unite]" :<C-u>Unite -buffer-name=mark mark<cr>

		" CtrlP alternative
		nnor <silent>  :<C-u>Unite -buffer-name=files file_rec/async<cr>
		nnor <silent> [unite]gf :<C-u>UniteWithCursorWord -buffer-name=files file_rec/async<cr>
	" }-
	" vim-lion {+
		let g:lion_create_maps=1
		let g:lion_prompt='[/]: '
		vmap <Enter> <Plug>VLionLeft/
		vmap <S-Enter> <Plug>VLionRight/
	" }-
" }-
" language-specific settings {+
	" set rust compiler
	au FileType rust if executable("rustc") | setlocal makeprg='rustc %' | endif

	" allow =filter to use xmllint
	au FileType xml,html if executable("xmllint") | let &l:equalprg='xmllint --format --recover -' | endif

	" vim {+
	" TODO: change this to use augroups
		if &ft == 'vim'
			set path+=~/.vim/bundle/
			set inex=strpart(v:fname,strridx(v:fname,'/')+1).'/README' " trim repo name
			set sua=.md,.txt,.markdown,.rst,.mdown
		endif
	" }-
" }-
" extended settings options {+
	let g:colorizer_auto_color = 1
	let g:indent_guides_enable_on_vim_startup = 0

	" local bundles should be added via ':NeoBundleExtraEdit'
	if filereadable(glob("~/.local.vimrc"))
		so ~/.local.vimrc
	endif
" }-
" autocommands {+
	" au BufReadPost * if buftype == "" | DetectIndent | endif
	" au BufWritePre * if buftype == "" | %s/\s\+$//e | endif 	" trim trailing whitespace

	au BufWinLeave * if expand("%") != "" | mkview | endif
	au BufWinEnter * if expand("%") != "" | silent loadview | endif

" }-
exe "colorscheme ". g:colorscheme
filetype plugin indent on
syntax on

" If % is a logfile, I like to use 'dcl' highlighting rules
if expand("%:e") == "log" | set ft=dcl | endif

" Spring files aren't recognized
if expand("%:e") == "spring" | set ft=xml | endif

" html/xml entity replacement {+
"augroup xml
"	syntax match xmlEntity "&quot;" conceal cchar="
"	syntax match xmlEntity "&amp;" conceal cchar=&
"	syntax match xmlEntity "&lt;" conceal cchar=<
"	syntax match xmlEntity "&gt;" conceal cchar=>
"	set cole=2
"	set concealcursor=nv
"augroup END
" ^ this makes my vim unhappy :(
" }-

